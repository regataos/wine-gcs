From 7c78c4bb595cc1ab37a7ecaf1d7be34d64f82cdf Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Sat, 11 Dec 2021 12:23:17 +0100
Subject: [PATCH] winevulkan: Add struct unwrappers for vrclient.

---
 dlls/winevulkan/loader.c         | 25 +++++++++++++++++++++++++
 dlls/winevulkan/make_vulkan      | 10 ++++++++++
 dlls/winevulkan/vulkan.c         | 31 +++++++++++++++++++++++++++++++
 dlls/winevulkan/vulkan_loader.h  |  6 ++++++
 dlls/winevulkan/vulkan_private.h |  6 ++++++
 5 files changed, 78 insertions(+)

diff --git a/dlls/winevulkan/loader.c b/dlls/winevulkan/loader.c
index 3fa334d2a3e..4821b132cfe 100644
--- a/dlls/winevulkan/loader.c
+++ b/dlls/winevulkan/loader.c
@@ -405,6 +405,31 @@ static BOOL WINAPI call_vulkan_debug_utils_callback( struct wine_vk_debug_utils_
     return params->user_callback(params->severity, params->message_types, &params->data, params->user_data);
 }

+VkDevice WINAPI __wine_get_native_VkDevice(VkDevice device)
+{
+    return unix_funcs->p_wine_get_native_VkDevice(device);
+}
+
+VkInstance WINAPI __wine_get_native_VkInstance(VkInstance instance)
+{
+    return unix_funcs->p_wine_get_native_VkInstance(instance);
+}
+
+VkPhysicalDevice WINAPI __wine_get_native_VkPhysicalDevice(VkPhysicalDevice phys_dev)
+{
+    return unix_funcs->p_wine_get_native_VkPhysicalDevice(phys_dev);
+}
+
+VkQueue WINAPI __wine_get_native_VkQueue(VkQueue queue)
+{
+    return unix_funcs->p_wine_get_native_VkQueue(queue);
+}
+
+VkPhysicalDevice WINAPI __wine_get_wrapped_VkPhysicalDevice(VkInstance instance, VkPhysicalDevice native_phys_dev)
+{
+    return unix_funcs->p_wine_get_wrapped_VkPhysicalDevice(instance, native_phys_dev);
+}
+
 BOOL WINAPI DllMain(HINSTANCE hinst, DWORD reason, void *reserved)
 {
     void **kernel_callback_table;
diff --git a/dlls/winevulkan/make_vulkan b/dlls/winevulkan/make_vulkan
index e9b1b456584..7fc4412fdfd 100755
--- a/dlls/winevulkan/make_vulkan
+++ b/dlls/winevulkan/make_vulkan
@@ -2847,6 +2847,11 @@ class VkGenerator(object):
         f.write("    wine_vk_call,\n")
         f.write("    wine_vk_is_available_instance_function,\n")
         f.write("    wine_vk_is_available_device_function,\n")
+        f.write("    __wine_get_native_VkDevice,\n")
+        f.write("    __wine_get_native_VkInstance,\n")
+        f.write("    __wine_get_native_VkPhysicalDevice,\n")
+        f.write("    __wine_get_native_VkQueue,\n")
+        f.write("    __wine_get_wrapped_VkPhysicalDevice,\n")
         f.write("};\n")

     def generate_thunks_h(self, f, prefix):
@@ -3229,6 +3234,11 @@ class VkGenerator(object):
         f.write("@ stdcall -private vk_icdGetInstanceProcAddr(ptr str)\n")
         f.write("@ stdcall -private vk_icdGetPhysicalDeviceProcAddr(ptr str)\n")
         f.write("@ stdcall -private vk_icdNegotiateLoaderICDInterfaceVersion(ptr)\n")
+        f.write("@ stdcall __wine_get_native_VkDevice(ptr)\n")
+        f.write("@ stdcall __wine_get_native_VkInstance(ptr)\n")
+        f.write("@ stdcall __wine_get_native_VkPhysicalDevice(ptr)\n")
+        f.write("@ stdcall __wine_get_native_VkQueue(ptr)\n")
+        f.write("@ stdcall __wine_get_wrapped_VkPhysicalDevice(ptr ptr)\n")

         # Export symbols for all Vulkan Core functions.
         for func in self.registry.funcs.values():
diff --git a/dlls/winevulkan/vulkan.c b/dlls/winevulkan/vulkan.c
index 638ca3a7a41..81c2feff36e 100644
--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -1767,3 +1767,34 @@ BOOL WINAPI wine_vk_is_available_device_function(VkDevice device, const char *na
 {
     return !!vk_funcs->p_vkGetDeviceProcAddr(device->device, name);
 }
+
+VkDevice WINAPI __wine_get_native_VkDevice(VkDevice device)
+{
+    return device->device;
+}
+
+VkInstance WINAPI __wine_get_native_VkInstance(VkInstance instance)
+{
+    return instance->instance;
+}
+
+VkPhysicalDevice WINAPI __wine_get_native_VkPhysicalDevice(VkPhysicalDevice phys_dev)
+{
+    return phys_dev->phys_dev;
+}
+
+VkQueue WINAPI __wine_get_native_VkQueue(VkQueue queue)
+{
+    return queue->queue;
+}
+
+VkPhysicalDevice WINAPI __wine_get_wrapped_VkPhysicalDevice(VkInstance instance, VkPhysicalDevice native_phys_dev)
+{
+    uint32_t i;
+    for(i = 0; i < instance->phys_dev_count; ++i){
+        if(instance->phys_devs[i]->phys_dev == native_phys_dev)
+            return instance->phys_devs[i];
+    }
+    WARN("Unknown native physical device: %p\n", native_phys_dev);
+    return NULL;
+}
diff --git a/dlls/winevulkan/vulkan_loader.h b/dlls/winevulkan/vulkan_loader.h
index 2efa56e0193..da3099fe042 100644
--- a/dlls/winevulkan/vulkan_loader.h
+++ b/dlls/winevulkan/vulkan_loader.h
@@ -108,6 +108,12 @@ struct unix_funcs
     NTSTATUS (WINAPI *p_vk_call)(enum unix_call, void *);
     BOOL (WINAPI *p_is_available_instance_function)(VkInstance, const char *);
     BOOL (WINAPI *p_is_available_device_function)(VkDevice, const char *);
+
+    VkDevice (WINAPI *p_wine_get_native_VkDevice)(VkDevice);
+    VkInstance (WINAPI *p_wine_get_native_VkInstance)(VkInstance);
+    VkPhysicalDevice (WINAPI *p_wine_get_native_VkPhysicalDevice)(VkPhysicalDevice);
+    VkQueue (WINAPI *p_wine_get_native_VkQueue)(VkQueue);
+    VkPhysicalDevice (WINAPI *p_wine_get_wrapped_VkPhysicalDevice)(VkInstance, VkPhysicalDevice);
 };

 #endif /* __WINE_VULKAN_LOADER_H */
diff --git a/dlls/winevulkan/vulkan_private.h b/dlls/winevulkan/vulkan_private.h
index 83a26988e8b..971b2cb56bf 100644
--- a/dlls/winevulkan/vulkan_private.h
+++ b/dlls/winevulkan/vulkan_private.h
@@ -217,4 +217,10 @@ extern const struct unix_funcs loader_funcs;
 BOOL WINAPI wine_vk_is_available_instance_function(VkInstance instance, const char *name) DECLSPEC_HIDDEN;
 BOOL WINAPI wine_vk_is_available_device_function(VkDevice device, const char *name) DECLSPEC_HIDDEN;

+extern VkDevice WINAPI __wine_get_native_VkDevice(VkDevice device) DECLSPEC_HIDDEN;
+extern VkInstance WINAPI __wine_get_native_VkInstance(VkInstance instance) DECLSPEC_HIDDEN;
+extern VkPhysicalDevice WINAPI __wine_get_native_VkPhysicalDevice(VkPhysicalDevice phys_dev) DECLSPEC_HIDDEN;
+extern VkQueue WINAPI __wine_get_native_VkQueue(VkQueue queue) DECLSPEC_HIDDEN;
+extern VkPhysicalDevice WINAPI __wine_get_wrapped_VkPhysicalDevice(VkInstance instance, VkPhysicalDevice native_phys_dev) DECLSPEC_HIDDEN;
+
 #endif /* __WINE_VULKAN_PRIVATE_H */
From 28b7ae8e2cf2fda0a41ad15d0ea0d6b85468c09e Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Tue, 18 Jun 2019 14:55:34 -0500
Subject: [PATCH] Revert "winevulkan: Check if instance extensions are
 supported."

This reverts commit e84999bd7ab859746e893ed2d49b1d42b0323c3a.

Vulkan VR games will try to load some extensions that winevulkan doesn't
support.
---
 dlls/winevulkan/vulkan.c | 8 +-------
 1 file changed, 1 insertion(+), 7 deletions(-)

diff --git a/dlls/winevulkan/vulkan.c b/dlls/winevulkan/vulkan.c
index 81c2feff36e..573e40aff89 100644
--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -506,17 +506,11 @@ static VkResult wine_vk_instance_convert_create_info(const VkInstanceCreateInfo
         return VK_ERROR_LAYER_NOT_PRESENT;
     }

-    TRACE("Enabled %u instance extensions.\n", dst->enabledExtensionCount);
+    TRACE("Enabled extensions: %u\n", dst->enabledExtensionCount);
     for (i = 0; i < dst->enabledExtensionCount; i++)
     {
         const char *extension_name = dst->ppEnabledExtensionNames[i];
         TRACE("Extension %u: %s.\n", i, debugstr_a(extension_name));
-        if (!wine_vk_instance_extension_supported(extension_name))
-        {
-            WARN("Extension %s is not supported.\n", debugstr_a(extension_name));
-            free_VkInstanceCreateInfo_struct_chain(dst);
-            return VK_ERROR_EXTENSION_NOT_PRESENT;
-        }
         if (!strcmp(extension_name, "VK_EXT_debug_utils") || !strcmp(extension_name, "VK_EXT_debug_report"))
         {
             object->enable_wrapper_list = VK_TRUE;
From e10162d664a82e6989a0e444807e9a1d84d86303 Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Tue, 25 Sep 2018 14:53:05 -0500
Subject: [PATCH] Revert "winevulkan: Check if device extensions are
 supported."

This reverts commit 4907ffdf2a15ab3a1e3749def37f4be67b758a35.

Vulkan VR games will try to load some extensions that winevulkan doesn't
support.
---
 dlls/winevulkan/vulkan.c | 11 ++---------
 1 file changed, 2 insertions(+), 9 deletions(-)

diff --git a/dlls/winevulkan/vulkan.c b/dlls/winevulkan/vulkan.c
index 573e40aff89..830fe7d9466 100644
--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -386,17 +386,10 @@ static VkResult wine_vk_device_convert_create_info(const VkDeviceCreateInfo *src
     dst->enabledLayerCount = 0;
     dst->ppEnabledLayerNames = NULL;

-    TRACE("Enabled %u extensions.\n", dst->enabledExtensionCount);
+    TRACE("Enabled extensions: %u.\n", dst->enabledExtensionCount);
     for (i = 0; i < dst->enabledExtensionCount; i++)
     {
-        const char *extension_name = dst->ppEnabledExtensionNames[i];
-        TRACE("Extension %u: %s.\n", i, debugstr_a(extension_name));
-        if (!wine_vk_device_extension_supported(extension_name))
-        {
-            WARN("Extension %s is not supported.\n", debugstr_a(extension_name));
-            wine_vk_device_free_create_info(dst);
-            return VK_ERROR_EXTENSION_NOT_PRESENT;
-        }
+        TRACE("Extension %u: %s.\n", i, debugstr_a(dst->ppEnabledExtensionNames[i]));
     }

     return VK_SUCCESS;
From 7e67d9e6792b2e4d97128ceb5d4ff2fdb581b37b Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Sun, 10 Oct 2021 21:52:26 +0200
Subject: [PATCH] winevulkan: Retrieve XR extensions from the environment

---
 dlls/winevulkan/vulkan.c | 124 +++++++++++++++++++++++++++++++++++++--
 1 file changed, 120 insertions(+), 4 deletions(-)

diff --git a/dlls/winevulkan/vulkan.c b/dlls/winevulkan/vulkan.c
index 830fe7d9466..5ca62ff9350 100644
--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -368,12 +368,70 @@ static void wine_vk_device_free_create_info(VkDeviceCreateInfo *create_info)
     free_VkDeviceCreateInfo_struct_chain(create_info);
 }

+static char **parse_xr_extensions(unsigned int *len)
+{
+    char *xr_str, *iter, *start, **list;
+    unsigned int extension_count = 0, o = 0;
+
+    xr_str = getenv("__WINE_OPENXR_VK_DEVICE_EXTENSIONS");
+    if (!xr_str)
+    {
+        *len = 0;
+        return NULL;
+    }
+    xr_str = strdup(xr_str);
+
+    TRACE("got var: %s\n", xr_str);
+
+    iter = xr_str;
+    while(*iter){
+        if(*iter++ == ' ')
+            extension_count++;
+    }
+    /* count the one ending in NUL */
+    if(iter != xr_str)
+        extension_count++;
+    if(!extension_count){
+        *len = 0;
+        return NULL;
+    }
+
+    TRACE("counted %u extensions\n", extension_count);
+
+    list = malloc(extension_count * sizeof(char *));
+
+    start = iter = xr_str;
+    do{
+        if(*iter == ' '){
+            *iter = 0;
+            list[o++] = strdup(start);
+            TRACE("added %s to list\n", list[o-1]);
+            iter++;
+            start = iter;
+        }else if(*iter == 0){
+            list[o++] = strdup(start);
+            TRACE("added %s to list\n", list[o-1]);
+            break;
+        }else{
+            iter++;
+        }
+    }while(1);
+
+    free(xr_str);
+
+    *len = extension_count;
+
+    return list;
+}
+
 static VkResult wine_vk_device_convert_create_info(const VkDeviceCreateInfo *src,
-        VkDeviceCreateInfo *dst)
+        VkDeviceCreateInfo *dst, BOOL *must_free_extensions)
 {
-    unsigned int i;
+    unsigned int i, append_xr = 0, wine_extension_count;
     VkResult res;

+    static const char *wine_xr_extension_name = "VK_WINE_openxr_device_extensions";
+
     *dst = *src;

     if ((res = convert_VkDeviceCreateInfo_struct_chain(src->pNext, dst)) < 0)
@@ -386,8 +444,54 @@ static VkResult wine_vk_device_convert_create_info(const VkDeviceCreateInfo *src
     dst->enabledLayerCount = 0;
     dst->ppEnabledLayerNames = NULL;

-    TRACE("Enabled extensions: %u.\n", dst->enabledExtensionCount);
     for (i = 0; i < dst->enabledExtensionCount; i++)
+    {
+        const char *extension_name = dst->ppEnabledExtensionNames[i];
+        if (!strcmp(extension_name, wine_xr_extension_name))
+        {
+            append_xr = 1;
+            break;
+        }
+    }
+
+    if (append_xr)
+    {
+        unsigned int xr_extensions_len, o = 0;
+        char **xr_extensions_list = parse_xr_extensions(&xr_extensions_len);
+
+        char **new_extensions_list = malloc(sizeof(char *) * (dst->enabledExtensionCount + xr_extensions_len));
+
+        if(!xr_extensions_list)
+            WARN("Requested to use XR extensions, but none are set!\n");
+
+        for (i = 0; i < dst->enabledExtensionCount; i++)
+        {
+            if (strcmp(dst->ppEnabledExtensionNames[i], wine_xr_extension_name) != 0)
+            {
+                new_extensions_list[o++] = strdup(dst->ppEnabledExtensionNames[i]);
+            }
+        }
+
+        TRACE("appending XR extensions:\n");
+        for (i = 0; i < xr_extensions_len; ++i)
+        {
+            TRACE("\t%s\n", xr_extensions_list[i]);
+            new_extensions_list[o++] = xr_extensions_list[i];
+        }
+        dst->enabledExtensionCount = o;
+        dst->ppEnabledExtensionNames = (const char * const *)new_extensions_list;
+
+        free(xr_extensions_list);
+
+        *must_free_extensions = TRUE;
+        wine_extension_count = dst->enabledExtensionCount - xr_extensions_len;
+    }else{
+        *must_free_extensions = FALSE;
+        wine_extension_count = dst->enabledExtensionCount;
+    }
+
+    TRACE("Enabled %u extensions.\n", dst->enabledExtensionCount);
+    for (i = 0; i < wine_extension_count; i++)
     {
         TRACE("Extension %u: %s.\n", i, debugstr_a(dst->ppEnabledExtensionNames[i]));
     }
@@ -395,6 +499,15 @@ static VkResult wine_vk_device_convert_create_info(const VkDeviceCreateInfo *src
     return VK_SUCCESS;
 }

+static void wine_vk_device_free_create_info_extensions(VkDeviceCreateInfo *create_info)
+{
+    unsigned int i;
+    for(i = 0; i < create_info->enabledExtensionCount; ++i)
+        free((void*)create_info->ppEnabledExtensionNames[i]);
+    free((void*)create_info->ppEnabledExtensionNames);
+}
+
+
 /* Helper function used for freeing a device structure. This function supports full
  * and partial object cleanups and can thus be used for vkCreateDevice failures.
  */
@@ -684,6 +797,7 @@ NTSTATUS wine_vkCreateDevice(void *args)
     struct VkQueue_T *next_queue;
     struct VkDevice_T *object;
     unsigned int i;
+    BOOL create_info_free_extensions;
     VkResult res;

     TRACE("%p, %p, %p, %p\n", phys_dev, create_info, allocator, device);
@@ -708,13 +822,15 @@ NTSTATUS wine_vkCreateDevice(void *args)
     object->base.base.loader_magic = VULKAN_ICD_MAGIC_VALUE;
     object->phys_dev = phys_dev;

-    res = wine_vk_device_convert_create_info(create_info, &create_info_host);
+    res = wine_vk_device_convert_create_info(create_info, &create_info_host, &create_info_free_extensions);
     if (res != VK_SUCCESS)
         goto fail;

     res = phys_dev->instance->funcs.p_vkCreateDevice(phys_dev->phys_dev,
             &create_info_host, NULL /* allocator */, &object->device);
     wine_vk_device_free_create_info(&create_info_host);
+    if(create_info_free_extensions)
+        wine_vk_device_free_create_info_extensions(&create_info_host);
     WINE_VK_ADD_DISPATCHABLE_MAPPING(phys_dev->instance, object, object->device);
     if (res != VK_SUCCESS)
     {
From 116711bfb34fb080381f1111f9c8ecf1fc33334a Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Sat, 11 Dec 2021 12:27:42 +0100
Subject: [PATCH] winevulkan: Add functions for creating VK instance and device
 through OpenXR.

---
 dlls/winevulkan/loader.c         | 20 ++++++++++++++++
 dlls/winevulkan/make_vulkan      | 10 ++++++++
 dlls/winevulkan/vulkan.c         | 39 +++++++++++++++++++++++++++++---
 dlls/winevulkan/vulkan_loader.h  | 10 ++++++++
 dlls/winevulkan/vulkan_private.h |  5 ++++
 dlls/winex11.drv/vulkan.c        | 22 ++++++++++++++----
 6 files changed, 99 insertions(+), 7 deletions(-)

diff --git a/dlls/winevulkan/loader.c b/dlls/winevulkan/loader.c
index 4821b132cfe..0b2c4241f75 100644
--- a/dlls/winevulkan/loader.c
+++ b/dlls/winevulkan/loader.c
@@ -430,6 +430,26 @@ VkPhysicalDevice WINAPI __wine_get_wrapped_VkPhysicalDevice(VkInstance instance,
     return unix_funcs->p_wine_get_wrapped_VkPhysicalDevice(instance, native_phys_dev);
 }

+VkResult WINAPI __wine_create_vk_instance_with_callback(const VkInstanceCreateInfo *create_info,
+        const VkAllocationCallbacks *allocator, VkInstance *instance,
+        VkResult (WINAPI *native_vkCreateInstance)(const VkInstanceCreateInfo *, const VkAllocationCallbacks *,
+        VkInstance *, void * (*)(VkInstance, const char *), void *), void *native_vkCreateInstance_context)
+{
+    return unix_funcs->p_wine_create_vk_instance_with_callback(create_info, allocator, instance,
+            native_vkCreateInstance, native_vkCreateInstance_context);
+}
+
+VkResult WINAPI __wine_create_vk_device_with_callback(VkPhysicalDevice phys_dev,
+        const VkDeviceCreateInfo *create_info,
+        const VkAllocationCallbacks *allocator, VkDevice *device,
+        VkResult (WINAPI *native_vkCreateDevice)(VkPhysicalDevice, const VkDeviceCreateInfo *, const VkAllocationCallbacks *,
+        VkDevice *, void * (*)(VkInstance, const char *), void *), void *native_vkCreateDevice_context)
+{
+    return unix_funcs->p_wine_create_vk_device_with_callback(phys_dev, create_info, allocator, device,
+            native_vkCreateDevice, native_vkCreateDevice_context);
+}
+
+
 BOOL WINAPI DllMain(HINSTANCE hinst, DWORD reason, void *reserved)
 {
     void **kernel_callback_table;
diff --git a/dlls/winevulkan/make_vulkan b/dlls/winevulkan/make_vulkan
index 7fc4412fdfd..e198256b31c 100755
--- a/dlls/winevulkan/make_vulkan
+++ b/dlls/winevulkan/make_vulkan
@@ -2852,6 +2852,8 @@ class VkGenerator(object):
         f.write("    __wine_get_native_VkPhysicalDevice,\n")
         f.write("    __wine_get_native_VkQueue,\n")
         f.write("    __wine_get_wrapped_VkPhysicalDevice,\n")
+        f.write("    __wine_create_vk_instance_with_callback,\n")
+        f.write("    __wine_create_vk_device_with_callback,\n")
         f.write("};\n")

     def generate_thunks_h(self, f, prefix):
@@ -3208,6 +3208,12 @@ class VkGenerator(object):
         f.write("     * will contain the area to blit the user image to in real coordinates.\n")
         f.write("     * All parameters are optional. */\n")
         f.write("    VkBool32 (*query_fs_hack)(VkSurfaceKHR surface, VkExtent2D *real_sz, VkExtent2D *user_sz, VkRect2D *dst_blit, VkFilter *filter);\n")
+
+        f.write("    VkResult (*create_vk_instance_with_callback)(const VkInstanceCreateInfo *create_info,\n")
+        f.write("            const VkAllocationCallbacks *allocator, VkInstance *instance,\n")
+        f.write("            VkResult (WINAPI *native_vkCreateInstance)(const VkInstanceCreateInfo *, const VkAllocationCallbacks *,\n")
+        f.write("            VkInstance *, void * (*)(VkInstance, const char *), void *), void *native_vkCreateInstance_context);\n")
+
         f.write("};\n\n")

         f.write("extern const struct vulkan_funcs * CDECL __wine_get_vulkan_driver(UINT version);\n\n")
@@ -3239,6 +3247,8 @@ class VkGenerator(object):
         f.write("@ stdcall __wine_get_native_VkPhysicalDevice(ptr)\n")
         f.write("@ stdcall __wine_get_native_VkQueue(ptr)\n")
         f.write("@ stdcall __wine_get_wrapped_VkPhysicalDevice(ptr ptr)\n")
+        f.write("@ stdcall __wine_create_vk_instance_with_callback(ptr ptr ptr ptr ptr)\n")
+        f.write("@ stdcall __wine_create_vk_device_with_callback(ptr ptr ptr ptr ptr ptr)\n")

         # Export symbols for all Vulkan Core functions.
         for func in self.registry.funcs.values():
diff --git a/dlls/winevulkan/vulkan.c b/dlls/winevulkan/vulkan.c
index 5ca62ff9350..9f12660a407 100644
--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -793,6 +793,15 @@ NTSTATUS wine_vkCreateDevice(void *args)
     const VkDeviceCreateInfo *create_info = params->pCreateInfo;
     const VkAllocationCallbacks *allocator = params->pAllocator;
     VkDevice *device = params->pDevice;
+    return __wine_create_vk_device_with_callback(phys_dev, create_info, allocator, device, NULL, NULL);
+}
+
+VkResult WINAPI __wine_create_vk_device_with_callback(VkPhysicalDevice phys_dev,
+        const VkDeviceCreateInfo *create_info,
+        const VkAllocationCallbacks *allocator, VkDevice *device,
+        VkResult (WINAPI *native_vkCreateDevice)(VkPhysicalDevice, const VkDeviceCreateInfo *, const VkAllocationCallbacks *,
+        VkDevice *, void * (*)(VkInstance, const char *), void *), void *native_vkCreateDevice_context)
+{
     VkDeviceCreateInfo create_info_host;
     struct VkQueue_T *next_queue;
     struct VkDevice_T *object;
@@ -826,8 +835,14 @@ NTSTATUS wine_vkCreateDevice(void *args)
     if (res != VK_SUCCESS)
         goto fail;

-    res = phys_dev->instance->funcs.p_vkCreateDevice(phys_dev->phys_dev,
-            &create_info_host, NULL /* allocator */, &object->device);
+    if (native_vkCreateDevice)
+        res = native_vkCreateDevice(phys_dev->phys_dev,
+                &create_info_host, NULL /* allocator */, &object->device,
+                vk_funcs->p_vkGetInstanceProcAddr, native_vkCreateDevice_context);
+    else
+        res = phys_dev->instance->funcs.p_vkCreateDevice(phys_dev->phys_dev,
+                &create_info_host, NULL /* allocator */, &object->device);
+
     wine_vk_device_free_create_info(&create_info_host);
     if(create_info_free_extensions)
         wine_vk_device_free_create_info_extensions(&create_info_host);
@@ -909,12 +909,23 @@ NTSTATUS wine_vkCreateInstance(void *args)
     const VkInstanceCreateInfo *create_info = params->pCreateInfo;
     const VkAllocationCallbacks *allocator = params->pAllocator;
     VkInstance *instance = params->pInstance;
+    return __wine_create_vk_instance_with_callback(create_info, allocator, instance, NULL, NULL);
+}
+
+VkResult WINAPI __wine_create_vk_instance_with_callback(const VkInstanceCreateInfo *create_info,
+        const VkAllocationCallbacks *allocator, VkInstance *instance,
+        VkResult (WINAPI *native_vkCreateInstance)(const VkInstanceCreateInfo *, const VkAllocationCallbacks *,
+        VkInstance *, void * (*)(VkInstance, const char *), void *), void *native_vkCreateInstance_context)
+{
     VkInstanceCreateInfo create_info_host;
     const VkApplicationInfo *app_info;
     uint32_t new_mxcsr, old_mxcsr;
     struct VkInstance_T *object;
     VkResult res;

+    TRACE("create_info %p, allocator %p, instance %p, native_vkCreateInstance %p, context %p.\n",
+            create_info, allocator, instance, native_vkCreateInstance, native_vkCreateInstance_context);
+
     if (allocator)
         FIXME("Support for allocation callbacks not implemented yet\n");

@@ -917,7 +943,14 @@ NTSTATUS wine_vkCreateInstance(void *args)
         return res;
     }

-    res = vk_funcs->p_vkCreateInstance(&create_info_host, NULL /* allocator */, &object->instance);
+    if (native_vkCreateInstance && !vk_funcs->create_vk_instance_with_callback)
+        ERR("Driver create_vk_instance_with_callback is not available.\n");
+
+    if (native_vkCreateInstance && vk_funcs->create_vk_instance_with_callback)
+        res = vk_funcs->create_vk_instance_with_callback(&create_info_host, NULL /* allocator */, &object->instance,
+                native_vkCreateInstance, native_vkCreateInstance_context);
+    else
+        res = vk_funcs->p_vkCreateInstance(&create_info_host, NULL /* allocator */, &object->instance);
     free_VkInstanceCreateInfo_struct_chain(&create_info_host);
     if (res != VK_SUCCESS)
     {
diff --git a/dlls/winevulkan/vulkan_loader.h b/dlls/winevulkan/vulkan_loader.h
index da3099fe042..05913756fbc 100644
--- a/dlls/winevulkan/vulkan_loader.h
+++ b/dlls/winevulkan/vulkan_loader.h
@@ -103,6 +103,11 @@ static inline NTSTATUS vk_unix_call(enum unix_call code, void *params)
     return __wine_unix_call(unix_handle, code, params);
 }

+typedef VkResult (WINAPI *PFN_native_vkCreateInstance)(const VkInstanceCreateInfo *, const VkAllocationCallbacks *, VkInstance *,
+                                                       void * (*)(VkInstance, const char *), void *);
+typedef VkResult (WINAPI *PFN_native_vkCreateDevice)(VkPhysicalDevice, const VkDeviceCreateInfo *, const VkAllocationCallbacks *, VkDevice *,
+                                                     void * (*)(VkInstance, const char *), void *);
+
 struct unix_funcs
 {
     NTSTATUS (WINAPI *p_vk_call)(enum unix_call, void *);
@@ -114,6 +119,11 @@ struct unix_funcs
     VkPhysicalDevice (WINAPI *p_wine_get_native_VkPhysicalDevice)(VkPhysicalDevice);
     VkQueue (WINAPI *p_wine_get_native_VkQueue)(VkQueue);
     VkPhysicalDevice (WINAPI *p_wine_get_wrapped_VkPhysicalDevice)(VkInstance, VkPhysicalDevice);
+
+    VkResult (WINAPI *p_wine_create_vk_instance_with_callback)(const VkInstanceCreateInfo *, const VkAllocationCallbacks *, VkInstance *,
+                                                               PFN_native_vkCreateInstance, void *);
+    VkResult (WINAPI *p_wine_create_vk_device_with_callback)(VkPhysicalDevice, const VkDeviceCreateInfo *, const VkAllocationCallbacks *, VkDevice *,
+                                                             PFN_native_vkCreateDevice, void *);
 };

 #endif /* __WINE_VULKAN_LOADER_H */
diff --git a/dlls/winevulkan/vulkan_private.h b/dlls/winevulkan/vulkan_private.h
index 971b2cb56bf..666ef95e1b1 100644
--- a/dlls/winevulkan/vulkan_private.h
+++ b/dlls/winevulkan/vulkan_private.h
@@ -223,4 +223,9 @@ extern VkPhysicalDevice WINAPI __wine_get_native_VkPhysicalDevice(VkPhysicalDevi
 extern VkQueue WINAPI __wine_get_native_VkQueue(VkQueue queue) DECLSPEC_HIDDEN;
 extern VkPhysicalDevice WINAPI __wine_get_wrapped_VkPhysicalDevice(VkInstance instance, VkPhysicalDevice native_phys_dev) DECLSPEC_HIDDEN;

+extern VkResult WINAPI __wine_create_vk_instance_with_callback(const VkInstanceCreateInfo *create_info, const VkAllocationCallbacks *allocator,
+        VkInstance *instance, PFN_native_vkCreateInstance callback, void *context) DECLSPEC_HIDDEN;
+extern VkResult WINAPI __wine_create_vk_device_with_callback(VkPhysicalDevice phys_dev, const VkDeviceCreateInfo *create_info,
+        const VkAllocationCallbacks *allocator, VkDevice *device, PFN_native_vkCreateDevice callback, void *context) DECLSPEC_HIDDEN;
+
 #endif /* __WINE_VULKAN_PRIVATE_H */
diff --git a/dlls/winex11.drv/vulkan.c b/dlls/winex11.drv/vulkan.c
index 619b0ecec1e..d805b3c8be4 100644
--- a/dlls/winex11.drv/vulkan.c
+++ b/dlls/winex11.drv/vulkan.c
@@ -257,12 +257,15 @@ void vulkan_thread_detach(void)
     LeaveCriticalSection(&context_section);
 }

-static VkResult X11DRV_vkCreateInstance(const VkInstanceCreateInfo *create_info,
-        const VkAllocationCallbacks *allocator, VkInstance *instance)
+static VkResult X11DRV_create_vk_instance_with_callback(const VkInstanceCreateInfo *create_info,
+        const VkAllocationCallbacks *allocator, VkInstance *instance,
+        VkResult (WINAPI *native_vkCreateInstance)(const VkInstanceCreateInfo *, const VkAllocationCallbacks *,
+        VkInstance *, void * (*)(VkInstance, const char *), void *), void *native_vkCreateInstance_context)
 {
     VkInstanceCreateInfo create_info_host;
     VkResult res;
-    TRACE("create_info %p, allocator %p, instance %p\n", create_info, allocator, instance);
+    TRACE("create_info %p, allocator %p, instance %p, native_vkCreateInstance %p, context %p.\n",
+            create_info, allocator, instance, native_vkCreateInstance, native_vkCreateInstance_context);

     if (allocator)
         FIXME("Support for allocation callbacks not implemented yet\n");
@@ -278,12 +281,22 @@ static VkResult X11DRV_vkCreateInstance(const VkInstanceCreateInfo *create_info,
         return res;
     }

-    res = pvkCreateInstance(&create_info_host, NULL /* allocator */, instance);
+    if (native_vkCreateInstance)
+        res = native_vkCreateInstance(&create_info_host, NULL /* allocator */, instance,
+                pvkGetInstanceProcAddr, native_vkCreateInstance_context);
+    else
+        res = pvkCreateInstance(&create_info_host, NULL /* allocator */, instance);

     heap_free((void *)create_info_host.ppEnabledExtensionNames);
     return res;
 }

+static VkResult X11DRV_vkCreateInstance(const VkInstanceCreateInfo *create_info,
+        const VkAllocationCallbacks *allocator, VkInstance *instance)
+{
+    return X11DRV_create_vk_instance_with_callback(create_info, allocator, instance, NULL, NULL);
+}
+
 static VkResult X11DRV_vkCreateSwapchainKHR(VkDevice device,
         const VkSwapchainCreateInfoKHR *create_info,
         const VkAllocationCallbacks *allocator, VkSwapchainKHR *swapchain)
@@ -964,6 +964,7 @@ static const struct vulkan_funcs vulkan_funcs =

     X11DRV_wine_get_native_surface,
     X11DRV_query_fs_hack,
+    X11DRV_create_vk_instance_with_callback,
 };

 static void *X11DRV_get_vk_device_proc_addr(const char *name)
From d6b1bc3622340688a99837e413368f2f0ce6bc58 Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Mon, 4 Jan 2021 14:25:06 -0600
Subject: [PATCH] wine.inf: Add OpenXR registry entries

---
 loader/wine.inf.in | 1 +
 1 file changed, 1 insertion(+)

diff --git a/loader/wine.inf.in b/loader/wine.inf.in
index 1a6af65a834..c0d600a00e3 100644
--- a/loader/wine.inf.in
+++ b/loader/wine.inf.in
@@ -6140,6 +6140,9 @@ HKCU,Software\Wine\DllOverrides,"nvcuda",0x2,"disabled"
 [NVIDIANGX]
 HKLM,Software\NVIDIA Corporation\Global\NGXCore,"FullPath",,"C:\Windows\System32"

+[ProtonOverrides]
+HKLM,Software\Khronos\OpenXR\1,"ActiveRuntime",,"C:\openxr\wineopenxr64.json"
+
 [NlsFiles]
 c_037.nls
 c_10000.nls
